If your source code is in the different directory, you need to change the directory on git bash with command cd followed by directory or path.

cd - To change the directory
Note: If you get fatal: remote origin already exists which means the connection is already established.

GIT DETAILS
git status ==we show all the details of branch, commits, untrack files and so on
GIT ADD
git add . ==will all file to staging area so that we can commit those files
git rm –-cached FILE_NAME or . ==to remove the files from staging area (Change to be committed area)

GIT COMMIT
Basically, what it does is it will take the file from staging area and save it in commit history for as a check points or save point.
git commit -m “MESSAGE HERE” == commit the change with message
git log == show all the committed date with details and hash code
git log –oneline == will show the commit titles only
git show HASH_CODE_HERE == will show all the details of changed files
git diff == show the change different from previous state with the changed lines
git restore FILE_NAME ==to discard changes in working directory

AMEND COMMITS (Rename the commit message)
git commit –-amend -m “NEW_MESSAGE”

GIT PUSH
git push -u origin main/master 
Or
git push (if you have already push with above code you don’t have to write it all)
Pushing on branch
git push -u origin BRANCH_NAME

GIT PULL
Git pull URL == to pull from remote to local computer (if you have already initialized it you don’t need URL

GIT BRANCH
git branch -r ==show full path of the branch
git branch -a ==show list of all branches
git branch BRANCH_NAME ==create new branch
git checkout BRANCH_NAME ==change branch to NAMED branch
git checkout - ==change to previous branch
git checkout -b BRANCH_NAME ==create new branch and checkout to that branch
git branch -d BRANCH_NAME ==delete branch

MERGE BRANCHES
The best practice of merging branches is by pull request. 
Go to GitHub and create a new pull request where you write all the description and submit.
After merging we again need to pull the main/master so that we are up to date with the GitHub codes.

RESOLVING MERGING CONFLICTS
To prevent this from happening always stay updated with remote to your local computer by
If we encounter any conflict, we stack out our commit first then pull the remote after resolving the conflict we again bring back our commit and stack over the top of the resolved-conflict then commit it together.
git pull
resolve conflict
git add .
git commit -m “MESSAGE_HERE”
git push

Git REBASE
When we fall behind from the latest change in main/master branch while working on branch we need to add our changes on top of that latest changes. Then we need rebase.
git pull --rebase (-r) origin master/main
It will try to bring the changes from main/master and add local changes but it will have CONFLICT files which we need to resolve manually.
After resolving we do
git add .
git rebase –continue (if any conflict resolve it then git add .)
git push (even though it shows error of branch is behind but we know we have resolved all the conflict during our git rebase –continue we can go through this)
git push -f (mean push forcefully)
